
/**
 * Ассинхронная функция, которая демонстрирует работу работу асинхронной функции "async function", и ключевого слова "await".
 * @param {String} url Параметр url, который будет передан в функцию "fetch" для получения данных (методом GET-запроса)
 * 
 * @returns {Promise} Возвращает обещание, в котором находятся данные, обработаные методом-парсером "json()"
 */
async function getData(url) {

	// Запускаем глобальную функцию "fetch()", которая возвращает обещание. В обещании находится ОБЪЕКТ ОТВЕТА.
	// Мы ждем, пока ответ будет получен и обрабатываем объект ответа с помощью ключевого слова "await".
	// Записываем объект ответа в переменную "response".
	let response = await fetch(url);

	// Обрабатываем объект ответа с помощью встроенной функции ".json()". Этот метод также возвращает обещание.
	/**
	 * ---- СПРАВКА ----
	 * При создании метода fetch() и его встроенных методов нужно было, чтобы эти методы также возвращали обещания. 
	 * Таким образом продолжается ЦЕПОЧКА ОБЕЩАНИЙ, которая не должна прерываться. 
	 */
	// Обрабатываем обещание — результат работы функции "json()" — распарсенные данные  с помощью ключевого слова "await".
	// Записываем данные в переменную "returnData"
	let returnData = await response.json();

	// Несмотря на то, что данные были обработаны с помощью "await" (и по идее мы должны получить готовые данные, которые и хотим тут вернуть) — с помощью ключевого слова "async", которое мы указали в начале этой функци, возвращается обещание (ассинхронная функция всегда возвращает обещание)
	return returnData
}


/**
 * Главная функция, в которой находятся другие функции.
 * Мы добавляем ключевое слово "async", чтобы 
 * 1. Мы могли использовать ключевое слово "await", которое ожидает завершение обещания и возвращает то, что находится в  обещании.
 * 2. Мы могли задать этот участок кода как асинхронный, в котором будут выполнятся участки синхронного кода (помеченные ключ. словом "await"). Это нужно для того, если у нас будут подключены другие файлы JavaScript, чтобы они не ждали завершения ответа от сервера и выполнялись далее синхронно.
 * 
 *  */
async function main() {

	let myUrl = 'https://jsonplaceholder.typicode.com/users';

	console.log(1);
	console.log(2);
	console.log(3);

	console.log( await getData(myUrl)); 

	console.log(4);
	console.log(5);
	console.log(6);
	console.log(7);
	console.log(8);

}

// Запускаем главную  функцию
main ();


// Дальше идет синхронный код, он будет выполнятся дальше, пока асинхронные функции выполняют свой функционал
console.log('a');
console.log('b');
console.log('c');
console.log('d');
console.log('e');
console.log('f');


/**
 *  * В результате, пока у нас делается запрос на сервер — остальной код скрипта который находится в этом файле и других файлах (которые могли быть подключены) — выполняется.
 *  * Когда же у нас прийдет ответ от сервера (он зачастую приходит позже) — он обрабатывается и выводится в консоль.
 */